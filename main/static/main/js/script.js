const mybutton = document.getElementById("btn-back-to-top"); function scrollFunction() { document.body.scrollTop > 20 || document.documentElement.scrollTop > 20 ? mybutton.style.display = "block" : mybutton.style.display = "none" } function backToTop() { document.body.scrollTop = 0, document.documentElement.scrollTop = 0 } window.onscroll = scrollFunction, mybutton.addEventListener("click", backToTop); const allElements = document.querySelectorAll("*"), root = document.documentElement, variables = { "--vis-imp-1-0": getComputedStyle(root).getPropertyValue("--vis-imp-1-0"), "--vis-imp-1-1": getComputedStyle(root).getPropertyValue("--vis-imp-1-1"), "--vis-imp-2-0": getComputedStyle(root).getPropertyValue("--vis-imp-2-0"), "--vis-imp-2-1": getComputedStyle(root).getPropertyValue("--vis-imp-2-1"), "--vis-imp-3-0": getComputedStyle(root).getPropertyValue("--vis-imp-3-0"), "--vis-imp-3-1": getComputedStyle(root).getPropertyValue("--vis-imp-3-1") }; function saveTheme(e, t) { localStorage.setItem("accessibilityTheme", e), localStorage.setItem("fontSize", t) } function applyTheme(e) { switch (e) { case "default": allElements.forEach(e => { e.hasAttribute("data-fixed-colors") || (e.style.backgroundColor = e.getAttribute("data-original-background-color"), e.style.color = e.getAttribute("data-original-color")) }); break; case "blackOnWhite": allElements.forEach(e => { e.hasAttribute("data-fixed-colors") || (e.style.backgroundColor = "#000000", e.style.color = "#ffffff") }); break; case "darkBlueOnLightBlue": allElements.forEach(e => { e.hasAttribute("data-fixed-colors") || (e.style.backgroundColor = variables["--vis-imp-1-0"], e.style.color = variables["--vis-imp-1-1"]) }); break; case "brownOnBeige": allElements.forEach(e => { e.hasAttribute("data-fixed-colors") || (e.style.backgroundColor = variables["--vis-imp-2-0"], e.style.color = variables["--vis-imp-2-1"]) }); break; case "greenOnDarkBrown": allElements.forEach(e => { e.hasAttribute("data-fixed-colors") || (e.style.backgroundColor = variables["--vis-imp-3-0"], e.style.color = variables["--vis-imp-3-1"]) }) } } function applySavedTheme() { let e = localStorage.getItem("accessibilityTheme") || "default", t = localStorage.getItem("fontSize"); applyTheme(e), t && (document.documentElement.style.fontSize = t + "px") } allElements.forEach(e => { e.dataset.originalBackgroundColor = window.getComputedStyle(e).backgroundColor, e.dataset.originalColor = window.getComputedStyle(e).color }); const increaseFontBtn = document.getElementById("increaseFontBtn"), normalFontBtn = document.getElementById("normalFontBtn"), decreaseFontBtn = document.getElementById("decreaseFontBtn"), defaultColorBtn = document.getElementById("defaultColorBtn"), whiteOnBlackBtn = document.getElementById("whiteOnBlackBtn"), darkBlueOnLightBlueBtn = document.getElementById("darkBlueOnLightBlueBtn"), brownOnBeigeBtn = document.getElementById("brownOnBeigeBtn"), greenOnDarkBrownBtn = document.getElementById("greenOnDarkBrownBtn"); increaseFontBtn.addEventListener("click", () => { let e = parseInt(window.getComputedStyle(document.documentElement).fontSize); e = Math.min(24, e + 2), document.documentElement.style.fontSize = e + "px", saveTheme(localStorage.getItem("accessibilityTheme") || "default", e) }), normalFontBtn.addEventListener("click", () => { document.documentElement.style.fontSize = "", saveTheme(localStorage.getItem("accessibilityTheme") || "default", "") }), decreaseFontBtn.addEventListener("click", () => { let e = parseInt(window.getComputedStyle(document.documentElement).fontSize); e = Math.max(12, e - 2), document.documentElement.style.fontSize = e + "px", saveTheme(localStorage.getItem("accessibilityTheme") || "default", e) }), defaultColorBtn.addEventListener("click", () => { applyTheme("default"), saveTheme("default", window.getComputedStyle(document.documentElement).fontSize.replace("px", "")) }), blackOnWhiteBtn.addEventListener("click", () => { applyTheme("blackOnWhite"), saveTheme("blackOnWhite", window.getComputedStyle(document.documentElement).fontSize.replace("px", "")) }), darkBlueOnLightBlueBtn.addEventListener("click", () => { applyTheme("darkBlueOnLightBlue"), saveTheme("darkBlueOnLightBlue", window.getComputedStyle(document.documentElement).fontSize.replace("px", "")) }), brownOnBeigeBtn.addEventListener("click", () => { applyTheme("brownOnBeige"), saveTheme("brownOnBeige", window.getComputedStyle(document.documentElement).fontSize.replace("px", "")) }), greenOnDarkBrownBtn.addEventListener("click", () => { applyTheme("greenOnDarkBrown"), saveTheme("greenOnDarkBrown", window.getComputedStyle(document.documentElement).fontSize.replace("px", "")) }), window.onload = applySavedTheme;