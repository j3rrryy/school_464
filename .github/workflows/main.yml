name: Lint, Test, Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Run Ruff linting
        uses: astral-sh/ruff-action@v1.1.1
        with:
          args: "check --fix"
          changed-files: "true"

      - name: Run Ruff formatting
        uses: astral-sh/ruff-action@v1.1.1
        with:
          args: "format"
          changed-files: "true"

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v5.0.1
        with:
          commit_message: "ruff: fix and apply formatting"

  build:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_PAT }}

      - name: Build test Docker image
        run: docker build -t ghcr.io/${{ github.repository }}:test .

      - name: Push test Docker image
        run: docker push ghcr.io/${{ github.repository }}:test

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_PAT }}

      - name: Pull test Docker image
        run: docker pull ghcr.io/${{ github.repository }}:test

      - name: Tag pulled image for testing
        run: docker tag ghcr.io/${{ github.repository }}:test school_464_django

      - name: Pull other images
        run: |
          docker pull redis:alpine
          docker pull postgres:alpine

      - name: Run Docker containers exclude Django
        run: |
          docker compose -f ./docker-compose.test.yml up postgres redis -d
          sleep 5

      - name: Run Django tests
        run: |
          docker compose -f ./docker-compose.test.yml up django
          docker cp django_test:./app/coverage.xml ./coverage.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5.0.7
        with:
          fail_ci_if_error: true
          files: ./coverage.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: j3rrryy/school_464
          verbose: true

  push:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_PAT }}

      - name: Pull test Docker image
        run: docker pull ghcr.io/${{ github.repository }}:test

      - name: Change tag to latest
        run: docker tag ghcr.io/${{ github.repository }}:test ghcr.io/${{ github.repository }}:latest

      - name: Push latest Docker image
        run: docker push ghcr.io/${{ github.repository }}:latest

      - name: Delete test Docker image
        run: docker rmi ghcr.io/${{ github.repository }}:test

  deploy:
    runs-on: ubuntu-latest
    needs: push
    steps:
      - name: Deploy the app
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          port: ${{ secrets.PORT }}
          script: |
            echo "${{ secrets.PASSWORD }}" | sudo -S sh -c "
            cd school_464 &&
            docker compose -f docker-compose.prod.yml down django &&
            docker pull ghcr.io/${{ github.repository }}:latest &&
            docker tag ghcr.io/${{ github.repository }}:latest school_464_django &&
            docker rmi ghcr.io/j3rrryy/school_464:latest &&
            docker compose -f docker-compose.prod.yml up django -d &&
            docker image prune -f
            "
